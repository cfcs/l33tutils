#!/bin/sh

RECURSE=false
case "$1" in
-v | --verbose ) VERBOSE="-v"; shift;;
-r | --recurse ) RECURSE=true; shift;;
-d | --dry-run ) DRYRUN="echo"; shift;;
-h | --help )
	echo >&2 "Usage: $0 [-v|--verbose] [-d|--dry-run] [-r|--recurse] <SOURCE> <TARGET>"
	echo >&2 "Graft a directory structure onto another, without overwriting existing files."
	echo >&2 "--recurse means to descend into directories rather than operating on the directory."
	exit
	;;
esac

test -d "$1" || { echo "need source dir"; exit 1; }
test -d "$2" || { echo "need target dir"; exit 1; }

case "$(basename "$0")" in
mvtree)	op() { $DRYRUN mv $VERBOSE "$1" "$2"; };;
lntree)	op() { $DRYRUN ln -s $VERBOSE "$3$1" "$2"; };;
*)	echo >&2 "Must be invoked as lntree or mvtree"; exit 1;;
esac

is_dir() {
	test ! -h "$1" -a -d "$1";
}

optree() {
	local src="$1" dst="$2"
	for i in "$src"/*; do
		local j="$dst/$(basename "$i")"
		local path_pre path_dir

		# adjust source if it's a relative path
		if [ "${src#/}" = "${src}" ]; then
			path_pre="$3"
			next_pre="$3../"
		else
			path_pre=""
			next_pre=""
		fi

		if [ ! -e "$j" ]; then
			if is_dir "$i" && $RECURSE; then
				mkdir "$j"
				optree "$i" "$j" "$next_pre"
			else
				op "$i" "$j" "$path_pre"
			fi
		elif is_dir "$i" && is_dir "$j"; then
			optree "$i" "$j" "$next_pre"
		else
			echo >&2 "skipped: $j -> $i"
		fi
	done
}

# strip trailing slash
optree "$(dirname "$1/.")" "$(dirname "$2/.")"
